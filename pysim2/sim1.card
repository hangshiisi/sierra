

https://sourceforge.net/p/openlte/wiki/Programming%20you%20own%20USIM%20card/



Pyscard
  First Install the dependencies: 
  
    sudo apt-get install pcscd pcsc-tools libccid libpcsclite-dev


  Now you need to download and install Pyscard:

    http://pyscard.sourceforge.net/

  Download and extract the latest Pyscard version:

    https://sourceforge.net/projects/pyscard/files/pyscard/

  Go to the extracted Pyscard folder (where the setup.py file is located) and run the following command:

    sudo /usr/bin/python setup.py build_ext install


Example to program a SysmoUSIM-SJS1 (orange) card:



sudo ./pySim-prog.py -p 0 -x 901 -y 80 -t sysmoUSIM-SJS1 -i 901800000009769 -s 8988211000000097694 --op=11111111111111111111111111111111 -k 8BAF473F2F8FD09487CCCBD7097C6862 -a 43313405


sudo ./pySim-prog.py -p 0 -x 901 -y 80 -t sysmoUSIM-SJS1 -i 901800000009769 -s 8988211000000097694 -k 5C45975B96DC5C02D51EFE72995AB5D9 -o 28C61C86B686696D125D909E08C9318B -a 43313405




tar zxvf pyscard-1.9.4.tar.gz


aurora@aurora-eNB-i7:~$ sudo pcsc_scan
PC/SC device scanner
V 1.4.22 (c) 2001-2011, Ludovic Rousseau <ludovic.rousseau@free.fr>
Compiled with PC/SC lite version: 1.8.10
Using reader plug'n play mechanism
Scanning present readers...
0: SCM Microsystems Inc. SCR 3310 [CCID Interface] (53311603706196) 00 00

Tue Jan 17 11:12:37 2017
Reader 0: SCM Microsystems Inc. SCR 3310 [CCID Interface] (53311603706196) 00 00
  Card state: Card inserted, 
  ATR: 3B 9F 96 80 1F C7 80 31 A0 73 BE 21 13 67 43 20 07 18 00 00 01 A5

ATR: 3B 9F 96 80 1F C7 80 31 A0 73 BE 21 13 67 43 20 07 18 00 00 01 A5
+ TS = 3B --> Direct Convention
+ T0 = 9F, Y(1): 1001, K: 15 (historical bytes)
  TA(1) = 96 --> Fi=512, Di=32, 16 cycles/ETU
    250000 bits/s at 4 MHz, fMax for Fi = 5 MHz => 312500 bits/s
  TD(1) = 80 --> Y(i+1) = 1000, Protocol T = 0 
-----
  TD(2) = 1F --> Y(i+1) = 0001, Protocol T = 15 - Global interface bytes following 
-----
  TA(3) = C7 --> Clock stop: no preference - Class accepted by the card: (3G) A 5V B 3V C 1.8V 
+ Historical bytes: 80 31 A0 73 BE 21 13 67 43 20 07 18 00 00 01
  Category indicator byte: 80 (compact TLV data object)
    Tag: 3, len: 1 (card service data byte)
      Card service data byte: A0
        - Application selection: by full DF name
        - BER-TLV data objects available in EF.DIR
        - EF.DIR and EF.ATR access services: by GET RECORD(s) command
        - Card with MF
    Tag: 7, len: 3 (card capabilities)
      Selection methods: BE
        - DF selection by full DF name
        - DF selection by path
        - DF selection by file identifier
        - Implicit DF selection
        - Short EF identifier supported
        - Record number supported
      Data coding byte: 21
        - Behaviour of write functions: proprietary
        - Value 'FF' for the first byte of BER-TLV tag fields: invalid
        - Data unit in quartets: 2
      Command chaining, length fields and logical channels: 13
        - Logical channel number assignment: by the card
        - Maximum number of logical channels: 4
    Tag: 6, len: 7 (pre-issuing data)
      Data: 43 20 07 18 00 00 01
+ TCK = A5 (correct checksum)

Possibly identified card (using /usr/share/pcsc/smartcard_list.txt):
	NONE

find: `/home/aurora/.cache/smartcard_list.txt': No such file or directory
Your card is not present in the database.
Please submit your unknown card at:
http://smartcard-atr.appspot.com/parse?ATR=3B9F96801FC78031A073BE21136743200718000001A5






=======================================


aurora@aurora-eNB-i7:~/EPC/card/pysim$ !259
sudo ./pySim-prog.py -p 0 -x 901 -y 80 -t sysmoUSIM-SJS1 -i 901800000009769 -s 8988211000000097694 -k 5C45975B96DC5C02D51EFE72995AB5D9 -o 28C61C86B686696D125D909E08C9318B -a 43313405
Insert card now (or CTRL-C to cancel)
Generated card parameters :
 > Name    : Magic
 > SMSP    : e1ffffffffffffffffffffffff0581005155f5ffffffffffff000000
 > ICCID   : 8988211000000097694
 > MCC/MNC : 901/80
 > IMSI    : 901800000009769
 > Ki      : 5C45975B96DC5C02D51EFE72995AB5D9
 > OPC     : 28C61C86B686696D125D909E08C9318B
 > ACC     : None

Programming ...
Traceback (most recent call last):
  File "./pySim-prog.py", line 626, in <module>
    card.program(cp)
  File "/home/aurora/EPC/card/pysim/pySim/cards.py", line 447, in program
    self._scc.verify_chv(0x0A, h2b(p['pin_adm']))
  File "/home/aurora/EPC/card/pysim/pySim/commands.py", line 107, in verify_chv
    return self._tp.send_apdu_checksw(self.cla_byte + '2000' + ('%02X' % chv_no) + '08' + fc)
  File "/home/aurora/EPC/card/pysim/pySim/transport/__init__.py", line 87, in send_apdu_checksw
    raise RuntimeError("SW match failed ! Expected %s and got %s." % (sw.lower(), rv[1]))
RuntimeError: SW match failed ! Expected 9000 and got 63c2.



=========================================

sudo ./pySim-read.py -p 0 -b 9000
Reading ...
Traceback (most recent call last):
  File "./pySim-read.py", line 90, in <module>
    (res, sw) = scc.read_binary(['3f00', '2fe2'])
  File "/home/aurora/EPC/card/pysim/pySim/commands.py", line 54, in read_binary
    r = self.select_file(ef)
  File "/home/aurora/EPC/card/pysim/pySim/commands.py", line 45, in select_file
    data, sw = self._tp.send_apdu_checksw(self.cla_byte + "a4000C02" + i)
  File "/home/aurora/EPC/card/pysim/pySim/transport/__init__.py", line 87, in send_apdu_checksw
    raise RuntimeError("SW match failed ! Expected %s and got %s." % (sw.lower(), rv[1]))
RuntimeError: SW match failed ! Expected 9000 and got 6b00.

=========================================